// Generated by CoffeeScript 2.5.1
var readJson, writeJson;

import {
  fs
} from './deps.js';

readJson = async function(path) {
  return JSON.parse((await Deno.readTextFile(path)));
};

writeJson = async function(path, object) {
  return (await Deno.writeTextFile(path, JSON.stringify(object, null, 2)));
};

export var DataStore = class DataStore {
  constructor(path1) {
    this.path = path1;
    fs.ensureDir(this.path);
    fs.ensureDir(`${this.path}/.backup`);
  }

  async readAll(path) {
    var base, entry, k, m, ref, ref1, v;
    if (path == null) {
      path = this.path;
    }
    base = {};
    ref = Deno.readDir(`${path}`);
    for await (entry of ref) {
      if (entry.isFile && (m = entry.name.match(/^(.*)\.json$/))) {
        if (m[1] === '') {
          ref1 = (await readJson(`${path}/${entry.name}`));
          for (k in ref1) {
            v = ref1[k];
            base[k] = v;
          }
        } else if (m[1][0] === '.') {
          continue;
        } else {
          base[m[1]] = (await readJson(`${path}/${entry.name}`));
        }
      } else if (entry.isDirectory && !entry.name.match(/^./)) {
        base[entry.name] = (await this.readAll(`${path}/${entry.name}`));
      }
    }
    return base;
  }

  async read(id) {
    var dirPath, e, jsonPath, stat;
    try {
      stat = (await Deno.stat(jsonPath = `${this.path}/${id}.json`));
      if (stat.isFile) {
        return (await readJson(jsonPath));
      }
    } catch (error) {
      e = error;
      console.log('JSON not found');
    }
    try {
      stat = (await Deno.stat(dirPath = `${this.path}/${id}`));
      if (stat.isDirectory) {
        return (await this.readAll(dirPath));
      }
    } catch (error) {
      e = error;
      console.log('dir not found');
    }
    return null;
  }

  async write(id, object) {
    var e, jsonPath, stat;
    try {
      stat = (await Deno.stat(jsonPath = `${this.path}/${id}.json`));
      if (stat.isFile) {
        await Deno.rename(jsonPath, `${this.path}/.backup/${id}.json`);
      }
    } catch (error) {
      e = error;
      console.log('existing json not found');
    }
    await writeJson(jsonPath, object);
    return console.log('wrote', object, 'to', jsonPath);
  }

};
